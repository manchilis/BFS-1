//TC:V+E -- Vertices+edges
//SC: V+E
//passed on all testcases on leetcode: yes

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
    //step 1: Initialize indegrees array and hash map & fill it
        int [] indegrees = new int [numCourses];
        HashMap<Integer,List<Integer>> map = new HashMap<>();
        for (int [] edge: prerequisites) {
            indegrees[edge[0]]++;
            if (!map.containsKey(edge[1])){
                map.put(edge[1],new ArrayList<>());
            }
            map.get(edge[1]).add(edge[0]);            
        }
    //step2: create a queue and add the independent nodes
        int count = 0;
        Queue<Integer> q = new LinkedList<>();
        for (int i=0; i<numCourses;i++){
            if (indegrees[i] == 0) {
                q.add(i);
                count++;
            }
        }
//step3: pop the nodes from the queue, while reducing the dependencies in indegrees array, getting children from map
        if(q.isEmpty()) return false;
        while(!q.isEmpty()) {
            int curr= q.poll();
            List <Integer> children = map.get(curr);
            if (children!=null) {
                for (int child:children) {
                    indegrees[child]--;
                    if (indegrees[child] == 0){
                        q.add(child);
                        count++;
                    }
                }
            }
        }
        if (count == numCourses) return true; // if all the courses become independent then that means all courses are compeleted
        return false;
        
    }
}
